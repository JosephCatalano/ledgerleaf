generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
  CASH
  OTHER
}

// NextAuth Adapter Models Start Here
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
// NextAuth Adapter Models End Here


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?   // <--- ADD THIS LINE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions      Session[]
  accounts      Account[]      // <-- Link to new OAuth Account table
  
  bankAccounts  BankAccount[]  // <-- Renamed: Financial accounts for tracking
  transactions  Transaction[]
  rules         Rule[]
  budgets       Budget[]
}

// RENAMED MODEL (was Account)
model BankAccount {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  institution String?
  type        AccountType
  last4       String?
  createdAt   DateTime @default(now())

  transactions Transaction[]

  @@index([userId])
  @@map("Account") // Keep original table name in DB for simpler migration
}

model Merchant {
  id             String   @id @default(cuid())
  name           String   @unique
  normalizedName String?
  createdAt      DateTime @default(now())

  transactions Transaction[]
}

model Category {
  id        String     @id @default(cuid())
  name      String

  // Self relation (parent/children)
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId  String?
  children  Category[] @relation("CategoryToCategory")

  createdAt DateTime   @default(now())

  transactions Transaction[]
  budgets     Budget[]

  // Back-relation for Rule.category
  rules       Rule[]

  @@index([parentId])
  @@unique([name, parentId])
}

model Tag {
  id    String  @id @default(cuid())
  name  String  @unique
  transactions TransactionTag[]
}

model Transaction {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  account     BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade) // <-- UPDATED RELATION
  accountId   String
  merchant    Merchant? @relation(fields: [merchantId], references: [id])
  merchantId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  date        DateTime
  amount      Decimal   @db.Decimal(14, 2)
  type        TransactionType
  description String
  createdAt   DateTime  @default(now())

  tags TransactionTag[]

  @@index([userId, date])
  @@index([accountId])
  @@index([merchantId])
  @@index([categoryId])
}

model TransactionTag {
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId         String

  @@id([transactionId, tagId])
}

model Rule {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  priority   Int
  field      String
  pattern    String

  // Many rules can point to one category (optional)
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  createdAt  DateTime  @default(now())

  @@index([userId, priority])
}

model Budget {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  month      String
  amount     Decimal  @db.Decimal(14, 2)
  createdAt  DateTime @default(now())

  @@unique([userId, categoryId, month])
}